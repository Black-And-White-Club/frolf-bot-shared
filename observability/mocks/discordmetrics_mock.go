// Code generated by MockGen. DO NOT EDIT.
// Source: observability/otel/metrics/discord/interface.go
//
// Generated by this command:
//
//	mockgen -source=observability/otel/metrics/discord/interface.go -destination=observability/mocks/discordmetrics_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockDiscordMetrics is a mock of DiscordMetrics interface.
type MockDiscordMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordMetricsMockRecorder
	isgomock struct{}
}

// MockDiscordMetricsMockRecorder is the mock recorder for MockDiscordMetrics.
type MockDiscordMetricsMockRecorder struct {
	mock *MockDiscordMetrics
}

// NewMockDiscordMetrics creates a new mock instance.
func NewMockDiscordMetrics(ctrl *gomock.Controller) *MockDiscordMetrics {
	mock := &MockDiscordMetrics{ctrl: ctrl}
	mock.recorder = &MockDiscordMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordMetrics) EXPECT() *MockDiscordMetricsMockRecorder {
	return m.recorder
}

// RecordAPIError mocks base method.
func (m *MockDiscordMetrics) RecordAPIError(ctx context.Context, endpoint, errorType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordAPIError", ctx, endpoint, errorType)
}

// RecordAPIError indicates an expected call of RecordAPIError.
func (mr *MockDiscordMetricsMockRecorder) RecordAPIError(ctx, endpoint, errorType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAPIError", reflect.TypeOf((*MockDiscordMetrics)(nil).RecordAPIError), ctx, endpoint, errorType)
}

// RecordAPIRequest mocks base method.
func (m *MockDiscordMetrics) RecordAPIRequest(ctx context.Context, endpoint string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordAPIRequest", ctx, endpoint)
}

// RecordAPIRequest indicates an expected call of RecordAPIRequest.
func (mr *MockDiscordMetricsMockRecorder) RecordAPIRequest(ctx, endpoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAPIRequest", reflect.TypeOf((*MockDiscordMetrics)(nil).RecordAPIRequest), ctx, endpoint)
}

// RecordAPIRequestDuration mocks base method.
func (m *MockDiscordMetrics) RecordAPIRequestDuration(ctx context.Context, endpoint string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordAPIRequestDuration", ctx, endpoint, duration)
}

// RecordAPIRequestDuration indicates an expected call of RecordAPIRequestDuration.
func (mr *MockDiscordMetricsMockRecorder) RecordAPIRequestDuration(ctx, endpoint, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordAPIRequestDuration", reflect.TypeOf((*MockDiscordMetrics)(nil).RecordAPIRequestDuration), ctx, endpoint, duration)
}

// RecordHandlerAttempt mocks base method.
func (m *MockDiscordMetrics) RecordHandlerAttempt(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerAttempt", ctx, handlerName)
}

// RecordHandlerAttempt indicates an expected call of RecordHandlerAttempt.
func (mr *MockDiscordMetricsMockRecorder) RecordHandlerAttempt(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerAttempt", reflect.TypeOf((*MockDiscordMetrics)(nil).RecordHandlerAttempt), ctx, handlerName)
}

// RecordHandlerDuration mocks base method.
func (m *MockDiscordMetrics) RecordHandlerDuration(ctx context.Context, handlerName string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerDuration", ctx, handlerName, duration)
}

// RecordHandlerDuration indicates an expected call of RecordHandlerDuration.
func (mr *MockDiscordMetricsMockRecorder) RecordHandlerDuration(ctx, handlerName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerDuration", reflect.TypeOf((*MockDiscordMetrics)(nil).RecordHandlerDuration), ctx, handlerName, duration)
}

// RecordHandlerFailure mocks base method.
func (m *MockDiscordMetrics) RecordHandlerFailure(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerFailure", ctx, handlerName)
}

// RecordHandlerFailure indicates an expected call of RecordHandlerFailure.
func (mr *MockDiscordMetricsMockRecorder) RecordHandlerFailure(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerFailure", reflect.TypeOf((*MockDiscordMetrics)(nil).RecordHandlerFailure), ctx, handlerName)
}

// RecordHandlerSuccess mocks base method.
func (m *MockDiscordMetrics) RecordHandlerSuccess(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerSuccess", ctx, handlerName)
}

// RecordHandlerSuccess indicates an expected call of RecordHandlerSuccess.
func (mr *MockDiscordMetricsMockRecorder) RecordHandlerSuccess(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerSuccess", reflect.TypeOf((*MockDiscordMetrics)(nil).RecordHandlerSuccess), ctx, handlerName)
}

// RecordRateLimit mocks base method.
func (m *MockDiscordMetrics) RecordRateLimit(ctx context.Context, endpoint string, resetTime time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRateLimit", ctx, endpoint, resetTime)
}

// RecordRateLimit indicates an expected call of RecordRateLimit.
func (mr *MockDiscordMetricsMockRecorder) RecordRateLimit(ctx, endpoint, resetTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRateLimit", reflect.TypeOf((*MockDiscordMetrics)(nil).RecordRateLimit), ctx, endpoint, resetTime)
}

// RecordWebsocketDisconnect mocks base method.
func (m *MockDiscordMetrics) RecordWebsocketDisconnect(ctx context.Context, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordWebsocketDisconnect", ctx, reason)
}

// RecordWebsocketDisconnect indicates an expected call of RecordWebsocketDisconnect.
func (mr *MockDiscordMetricsMockRecorder) RecordWebsocketDisconnect(ctx, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordWebsocketDisconnect", reflect.TypeOf((*MockDiscordMetrics)(nil).RecordWebsocketDisconnect), ctx, reason)
}

// RecordWebsocketEvent mocks base method.
func (m *MockDiscordMetrics) RecordWebsocketEvent(ctx context.Context, eventType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordWebsocketEvent", ctx, eventType)
}

// RecordWebsocketEvent indicates an expected call of RecordWebsocketEvent.
func (mr *MockDiscordMetricsMockRecorder) RecordWebsocketEvent(ctx, eventType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordWebsocketEvent", reflect.TypeOf((*MockDiscordMetrics)(nil).RecordWebsocketEvent), ctx, eventType)
}

// RecordWebsocketReconnect mocks base method.
func (m *MockDiscordMetrics) RecordWebsocketReconnect(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordWebsocketReconnect", ctx)
}

// RecordWebsocketReconnect indicates an expected call of RecordWebsocketReconnect.
func (mr *MockDiscordMetricsMockRecorder) RecordWebsocketReconnect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordWebsocketReconnect", reflect.TypeOf((*MockDiscordMetrics)(nil).RecordWebsocketReconnect), ctx)
}
