// Code generated by MockGen. DO NOT EDIT.
// Source: observability/prometheus/user/metrics.go
//
// Generated by this command:
//
//	mockgen -source=observability/prometheus/user/metrics.go -destination=observability/mocks/usermetrics_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockUserMetrics is a mock of UserMetrics interface.
type MockUserMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockUserMetricsMockRecorder
	isgomock struct{}
}

// MockUserMetricsMockRecorder is the mock recorder for MockUserMetrics.
type MockUserMetricsMockRecorder struct {
	mock *MockUserMetrics
}

// NewMockUserMetrics creates a new mock instance.
func NewMockUserMetrics(ctrl *gomock.Controller) *MockUserMetrics {
	mock := &MockUserMetrics{ctrl: ctrl}
	mock.recorder = &MockUserMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserMetrics) EXPECT() *MockUserMetricsMockRecorder {
	return m.recorder
}

// DBQueryDuration mocks base method.
func (m *MockUserMetrics) DBQueryDuration(duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DBQueryDuration", duration)
}

// DBQueryDuration indicates an expected call of DBQueryDuration.
func (mr *MockUserMetricsMockRecorder) DBQueryDuration(duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBQueryDuration", reflect.TypeOf((*MockUserMetrics)(nil).DBQueryDuration), duration)
}

// RecordHandlerAttempt mocks base method.
func (m *MockUserMetrics) RecordHandlerAttempt(handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerAttempt", handlerName)
}

// RecordHandlerAttempt indicates an expected call of RecordHandlerAttempt.
func (mr *MockUserMetricsMockRecorder) RecordHandlerAttempt(handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerAttempt", reflect.TypeOf((*MockUserMetrics)(nil).RecordHandlerAttempt), handlerName)
}

// RecordHandlerDuration mocks base method.
func (m *MockUserMetrics) RecordHandlerDuration(handlerName string, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerDuration", handlerName, duration)
}

// RecordHandlerDuration indicates an expected call of RecordHandlerDuration.
func (mr *MockUserMetricsMockRecorder) RecordHandlerDuration(handlerName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerDuration", reflect.TypeOf((*MockUserMetrics)(nil).RecordHandlerDuration), handlerName, duration)
}

// RecordHandlerFailure mocks base method.
func (m *MockUserMetrics) RecordHandlerFailure(handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerFailure", handlerName)
}

// RecordHandlerFailure indicates an expected call of RecordHandlerFailure.
func (mr *MockUserMetricsMockRecorder) RecordHandlerFailure(handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerFailure", reflect.TypeOf((*MockUserMetrics)(nil).RecordHandlerFailure), handlerName)
}

// RecordHandlerSuccess mocks base method.
func (m *MockUserMetrics) RecordHandlerSuccess(handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerSuccess", handlerName)
}

// RecordHandlerSuccess indicates an expected call of RecordHandlerSuccess.
func (mr *MockUserMetricsMockRecorder) RecordHandlerSuccess(handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerSuccess", reflect.TypeOf((*MockUserMetrics)(nil).RecordHandlerSuccess), handlerName)
}

// RecordOperationAttempt mocks base method.
func (m *MockUserMetrics) RecordOperationAttempt(operationName string, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationAttempt", operationName, userID)
}

// RecordOperationAttempt indicates an expected call of RecordOperationAttempt.
func (mr *MockUserMetricsMockRecorder) RecordOperationAttempt(operationName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationAttempt", reflect.TypeOf((*MockUserMetrics)(nil).RecordOperationAttempt), operationName, userID)
}

// RecordOperationDuration mocks base method.
func (m *MockUserMetrics) RecordOperationDuration(operationName string, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationDuration", operationName, duration)
}

// RecordOperationDuration indicates an expected call of RecordOperationDuration.
func (mr *MockUserMetricsMockRecorder) RecordOperationDuration(operationName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationDuration", reflect.TypeOf((*MockUserMetrics)(nil).RecordOperationDuration), operationName, duration)
}

// RecordOperationFailure mocks base method.
func (m *MockUserMetrics) RecordOperationFailure(operationName string, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationFailure", operationName, userID)
}

// RecordOperationFailure indicates an expected call of RecordOperationFailure.
func (mr *MockUserMetricsMockRecorder) RecordOperationFailure(operationName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationFailure", reflect.TypeOf((*MockUserMetrics)(nil).RecordOperationFailure), operationName, userID)
}

// RecordOperationSuccess mocks base method.
func (m *MockUserMetrics) RecordOperationSuccess(operationName string, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationSuccess", operationName, userID)
}

// RecordOperationSuccess indicates an expected call of RecordOperationSuccess.
func (mr *MockUserMetricsMockRecorder) RecordOperationSuccess(operationName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationSuccess", reflect.TypeOf((*MockUserMetrics)(nil).RecordOperationSuccess), operationName, userID)
}

// RecordPermissionCheck mocks base method.
func (m *MockUserMetrics) RecordPermissionCheck(role sharedtypes.UserRoleEnum, allowed bool, action, resource string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordPermissionCheck", role, allowed, action, resource)
}

// RecordPermissionCheck indicates an expected call of RecordPermissionCheck.
func (mr *MockUserMetricsMockRecorder) RecordPermissionCheck(role, allowed, action, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordPermissionCheck", reflect.TypeOf((*MockUserMetrics)(nil).RecordPermissionCheck), role, allowed, action, resource)
}

// RecordRoleUpdate mocks base method.
func (m *MockUserMetrics) RecordRoleUpdate(oldRole, newRole sharedtypes.UserRoleEnum, context string, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoleUpdate", oldRole, newRole, context, userID)
}

// RecordRoleUpdate indicates an expected call of RecordRoleUpdate.
func (mr *MockUserMetricsMockRecorder) RecordRoleUpdate(oldRole, newRole, context, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoleUpdate", reflect.TypeOf((*MockUserMetrics)(nil).RecordRoleUpdate), oldRole, newRole, context, userID)
}

// RecordTagAvailabilityCheck mocks base method.
func (m *MockUserMetrics) RecordTagAvailabilityCheck(available bool, tag int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagAvailabilityCheck", available, tag)
}

// RecordTagAvailabilityCheck indicates an expected call of RecordTagAvailabilityCheck.
func (mr *MockUserMetricsMockRecorder) RecordTagAvailabilityCheck(available, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagAvailabilityCheck", reflect.TypeOf((*MockUserMetrics)(nil).RecordTagAvailabilityCheck), available, tag)
}

// RecordUserCreation mocks base method.
func (m *MockUserMetrics) RecordUserCreation(userType, source, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserCreation", userType, source, status)
}

// RecordUserCreation indicates an expected call of RecordUserCreation.
func (mr *MockUserMetricsMockRecorder) RecordUserCreation(userType, source, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserCreation", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserCreation), userType, source, status)
}

// RecordUserRetrieval mocks base method.
func (m *MockUserMetrics) RecordUserRetrieval(success bool, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRetrieval", success, userID)
}

// RecordUserRetrieval indicates an expected call of RecordUserRetrieval.
func (mr *MockUserMetricsMockRecorder) RecordUserRetrieval(success, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRetrieval", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRetrieval), success, userID)
}

// RecordUserRetrievalDuration mocks base method.
func (m *MockUserMetrics) RecordUserRetrievalDuration(duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRetrievalDuration", duration)
}

// RecordUserRetrievalDuration indicates an expected call of RecordUserRetrievalDuration.
func (mr *MockUserMetricsMockRecorder) RecordUserRetrievalDuration(duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRetrievalDuration", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRetrievalDuration), duration)
}

// RecordUserRoleRetrieval mocks base method.
func (m *MockUserMetrics) RecordUserRoleRetrieval(success bool, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRoleRetrieval", success, userID)
}

// RecordUserRoleRetrieval indicates an expected call of RecordUserRoleRetrieval.
func (mr *MockUserMetricsMockRecorder) RecordUserRoleRetrieval(success, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRoleRetrieval", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRoleRetrieval), success, userID)
}

// RecordUserRoleUpdateAttempt mocks base method.
func (m *MockUserMetrics) RecordUserRoleUpdateAttempt(userID sharedtypes.DiscordID, newRole string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRoleUpdateAttempt", userID, newRole)
}

// RecordUserRoleUpdateAttempt indicates an expected call of RecordUserRoleUpdateAttempt.
func (mr *MockUserMetricsMockRecorder) RecordUserRoleUpdateAttempt(userID, newRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRoleUpdateAttempt", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRoleUpdateAttempt), userID, newRole)
}

// RecordUserRoleUpdateFailure mocks base method.
func (m *MockUserMetrics) RecordUserRoleUpdateFailure(userID sharedtypes.DiscordID, newRole string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRoleUpdateFailure", userID, newRole)
}

// RecordUserRoleUpdateFailure indicates an expected call of RecordUserRoleUpdateFailure.
func (mr *MockUserMetricsMockRecorder) RecordUserRoleUpdateFailure(userID, newRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRoleUpdateFailure", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRoleUpdateFailure), userID, newRole)
}

// RecordUserRoleUpdateSuccess mocks base method.
func (m *MockUserMetrics) RecordUserRoleUpdateSuccess(userID sharedtypes.DiscordID, newRole string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRoleUpdateSuccess", userID, newRole)
}

// RecordUserRoleUpdateSuccess indicates an expected call of RecordUserRoleUpdateSuccess.
func (mr *MockUserMetricsMockRecorder) RecordUserRoleUpdateSuccess(userID, newRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRoleUpdateSuccess", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRoleUpdateSuccess), userID, newRole)
}

// UserCreationByTag mocks base method.
func (m *MockUserMetrics) UserCreationByTag(tag int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserCreationByTag", tag)
}

// UserCreationByTag indicates an expected call of UserCreationByTag.
func (mr *MockUserMetricsMockRecorder) UserCreationByTag(tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreationByTag", reflect.TypeOf((*MockUserMetrics)(nil).UserCreationByTag), tag)
}

// UserCreationDuration mocks base method.
func (m *MockUserMetrics) UserCreationDuration(duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserCreationDuration", duration)
}

// UserCreationDuration indicates an expected call of UserCreationDuration.
func (mr *MockUserMetricsMockRecorder) UserCreationDuration(duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreationDuration", reflect.TypeOf((*MockUserMetrics)(nil).UserCreationDuration), duration)
}
