// Code generated by MockGen. DO NOT EDIT.
// Source: observability/otel/metrics/user/interface.go
//
// Generated by this command:
//
//	mockgen -source=observability/otel/metrics/user/interface.go -destination=observability/mocks/usermetrics_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockUserMetrics is a mock of UserMetrics interface.
type MockUserMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockUserMetricsMockRecorder
	isgomock struct{}
}

// MockUserMetricsMockRecorder is the mock recorder for MockUserMetrics.
type MockUserMetricsMockRecorder struct {
	mock *MockUserMetrics
}

// NewMockUserMetrics creates a new mock instance.
func NewMockUserMetrics(ctrl *gomock.Controller) *MockUserMetrics {
	mock := &MockUserMetrics{ctrl: ctrl}
	mock.recorder = &MockUserMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserMetrics) EXPECT() *MockUserMetricsMockRecorder {
	return m.recorder
}

// RecordDBQueryDuration mocks base method.
func (m *MockUserMetrics) RecordDBQueryDuration(ctx context.Context, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordDBQueryDuration", ctx, duration)
}

// RecordDBQueryDuration indicates an expected call of RecordDBQueryDuration.
func (mr *MockUserMetricsMockRecorder) RecordDBQueryDuration(ctx, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordDBQueryDuration", reflect.TypeOf((*MockUserMetrics)(nil).RecordDBQueryDuration), ctx, duration)
}

// RecordHandlerAttempt mocks base method.
func (m *MockUserMetrics) RecordHandlerAttempt(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerAttempt", ctx, handlerName)
}

// RecordHandlerAttempt indicates an expected call of RecordHandlerAttempt.
func (mr *MockUserMetricsMockRecorder) RecordHandlerAttempt(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerAttempt", reflect.TypeOf((*MockUserMetrics)(nil).RecordHandlerAttempt), ctx, handlerName)
}

// RecordHandlerDuration mocks base method.
func (m *MockUserMetrics) RecordHandlerDuration(ctx context.Context, handlerName string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerDuration", ctx, handlerName, duration)
}

// RecordHandlerDuration indicates an expected call of RecordHandlerDuration.
func (mr *MockUserMetricsMockRecorder) RecordHandlerDuration(ctx, handlerName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerDuration", reflect.TypeOf((*MockUserMetrics)(nil).RecordHandlerDuration), ctx, handlerName, duration)
}

// RecordHandlerFailure mocks base method.
func (m *MockUserMetrics) RecordHandlerFailure(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerFailure", ctx, handlerName)
}

// RecordHandlerFailure indicates an expected call of RecordHandlerFailure.
func (mr *MockUserMetricsMockRecorder) RecordHandlerFailure(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerFailure", reflect.TypeOf((*MockUserMetrics)(nil).RecordHandlerFailure), ctx, handlerName)
}

// RecordHandlerSuccess mocks base method.
func (m *MockUserMetrics) RecordHandlerSuccess(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerSuccess", ctx, handlerName)
}

// RecordHandlerSuccess indicates an expected call of RecordHandlerSuccess.
func (mr *MockUserMetricsMockRecorder) RecordHandlerSuccess(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerSuccess", reflect.TypeOf((*MockUserMetrics)(nil).RecordHandlerSuccess), ctx, handlerName)
}

// RecordOperationAttempt mocks base method.
func (m *MockUserMetrics) RecordOperationAttempt(ctx context.Context, operationName string, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationAttempt", ctx, operationName, userID)
}

// RecordOperationAttempt indicates an expected call of RecordOperationAttempt.
func (mr *MockUserMetricsMockRecorder) RecordOperationAttempt(ctx, operationName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationAttempt", reflect.TypeOf((*MockUserMetrics)(nil).RecordOperationAttempt), ctx, operationName, userID)
}

// RecordOperationDuration mocks base method.
func (m *MockUserMetrics) RecordOperationDuration(ctx context.Context, operationName string, duration time.Duration, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationDuration", ctx, operationName, duration, userID)
}

// RecordOperationDuration indicates an expected call of RecordOperationDuration.
func (mr *MockUserMetricsMockRecorder) RecordOperationDuration(ctx, operationName, duration, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationDuration", reflect.TypeOf((*MockUserMetrics)(nil).RecordOperationDuration), ctx, operationName, duration, userID)
}

// RecordOperationFailure mocks base method.
func (m *MockUserMetrics) RecordOperationFailure(ctx context.Context, operationName string, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationFailure", ctx, operationName, userID)
}

// RecordOperationFailure indicates an expected call of RecordOperationFailure.
func (mr *MockUserMetricsMockRecorder) RecordOperationFailure(ctx, operationName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationFailure", reflect.TypeOf((*MockUserMetrics)(nil).RecordOperationFailure), ctx, operationName, userID)
}

// RecordOperationSuccess mocks base method.
func (m *MockUserMetrics) RecordOperationSuccess(ctx context.Context, operationName string, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationSuccess", ctx, operationName, userID)
}

// RecordOperationSuccess indicates an expected call of RecordOperationSuccess.
func (mr *MockUserMetricsMockRecorder) RecordOperationSuccess(ctx, operationName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationSuccess", reflect.TypeOf((*MockUserMetrics)(nil).RecordOperationSuccess), ctx, operationName, userID)
}

// RecordPermissionCheckAttempt mocks base method.
func (m *MockUserMetrics) RecordPermissionCheckAttempt(ctx context.Context, role sharedtypes.UserRoleEnum, action, resource string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordPermissionCheckAttempt", ctx, role, action, resource)
}

// RecordPermissionCheckAttempt indicates an expected call of RecordPermissionCheckAttempt.
func (mr *MockUserMetricsMockRecorder) RecordPermissionCheckAttempt(ctx, role, action, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordPermissionCheckAttempt", reflect.TypeOf((*MockUserMetrics)(nil).RecordPermissionCheckAttempt), ctx, role, action, resource)
}

// RecordPermissionCheckDuration mocks base method.
func (m *MockUserMetrics) RecordPermissionCheckDuration(ctx context.Context, role sharedtypes.UserRoleEnum, action, resource string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordPermissionCheckDuration", ctx, role, action, resource, duration)
}

// RecordPermissionCheckDuration indicates an expected call of RecordPermissionCheckDuration.
func (mr *MockUserMetricsMockRecorder) RecordPermissionCheckDuration(ctx, role, action, resource, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordPermissionCheckDuration", reflect.TypeOf((*MockUserMetrics)(nil).RecordPermissionCheckDuration), ctx, role, action, resource, duration)
}

// RecordPermissionCheckFailure mocks base method.
func (m *MockUserMetrics) RecordPermissionCheckFailure(ctx context.Context, role sharedtypes.UserRoleEnum, action, resource string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordPermissionCheckFailure", ctx, role, action, resource)
}

// RecordPermissionCheckFailure indicates an expected call of RecordPermissionCheckFailure.
func (mr *MockUserMetricsMockRecorder) RecordPermissionCheckFailure(ctx, role, action, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordPermissionCheckFailure", reflect.TypeOf((*MockUserMetrics)(nil).RecordPermissionCheckFailure), ctx, role, action, resource)
}

// RecordPermissionCheckSuccess mocks base method.
func (m *MockUserMetrics) RecordPermissionCheckSuccess(ctx context.Context, role sharedtypes.UserRoleEnum, action, resource string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordPermissionCheckSuccess", ctx, role, action, resource)
}

// RecordPermissionCheckSuccess indicates an expected call of RecordPermissionCheckSuccess.
func (mr *MockUserMetricsMockRecorder) RecordPermissionCheckSuccess(ctx, role, action, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordPermissionCheckSuccess", reflect.TypeOf((*MockUserMetrics)(nil).RecordPermissionCheckSuccess), ctx, role, action, resource)
}

// RecordRoleUpdateAttempt mocks base method.
func (m *MockUserMetrics) RecordRoleUpdateAttempt(ctx context.Context, userID sharedtypes.DiscordID, oldRole, newRole sharedtypes.UserRoleEnum) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoleUpdateAttempt", ctx, userID, oldRole, newRole)
}

// RecordRoleUpdateAttempt indicates an expected call of RecordRoleUpdateAttempt.
func (mr *MockUserMetricsMockRecorder) RecordRoleUpdateAttempt(ctx, userID, oldRole, newRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoleUpdateAttempt", reflect.TypeOf((*MockUserMetrics)(nil).RecordRoleUpdateAttempt), ctx, userID, oldRole, newRole)
}

// RecordRoleUpdateDuration mocks base method.
func (m *MockUserMetrics) RecordRoleUpdateDuration(ctx context.Context, userID sharedtypes.DiscordID, oldRole, newRole sharedtypes.UserRoleEnum, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoleUpdateDuration", ctx, userID, oldRole, newRole, duration)
}

// RecordRoleUpdateDuration indicates an expected call of RecordRoleUpdateDuration.
func (mr *MockUserMetricsMockRecorder) RecordRoleUpdateDuration(ctx, userID, oldRole, newRole, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoleUpdateDuration", reflect.TypeOf((*MockUserMetrics)(nil).RecordRoleUpdateDuration), ctx, userID, oldRole, newRole, duration)
}

// RecordRoleUpdateFailure mocks base method.
func (m *MockUserMetrics) RecordRoleUpdateFailure(ctx context.Context, userID sharedtypes.DiscordID, oldRole, newRole sharedtypes.UserRoleEnum) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoleUpdateFailure", ctx, userID, oldRole, newRole)
}

// RecordRoleUpdateFailure indicates an expected call of RecordRoleUpdateFailure.
func (mr *MockUserMetricsMockRecorder) RecordRoleUpdateFailure(ctx, userID, oldRole, newRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoleUpdateFailure", reflect.TypeOf((*MockUserMetrics)(nil).RecordRoleUpdateFailure), ctx, userID, oldRole, newRole)
}

// RecordRoleUpdateSuccess mocks base method.
func (m *MockUserMetrics) RecordRoleUpdateSuccess(ctx context.Context, userID sharedtypes.DiscordID, oldRole, newRole sharedtypes.UserRoleEnum) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoleUpdateSuccess", ctx, userID, oldRole, newRole)
}

// RecordRoleUpdateSuccess indicates an expected call of RecordRoleUpdateSuccess.
func (mr *MockUserMetricsMockRecorder) RecordRoleUpdateSuccess(ctx, userID, oldRole, newRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoleUpdateSuccess", reflect.TypeOf((*MockUserMetrics)(nil).RecordRoleUpdateSuccess), ctx, userID, oldRole, newRole)
}

// RecordTagAvailabilityCheck mocks base method.
func (m *MockUserMetrics) RecordTagAvailabilityCheck(ctx context.Context, available bool, tag sharedtypes.TagNumber) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagAvailabilityCheck", ctx, available, tag)
}

// RecordTagAvailabilityCheck indicates an expected call of RecordTagAvailabilityCheck.
func (mr *MockUserMetricsMockRecorder) RecordTagAvailabilityCheck(ctx, available, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagAvailabilityCheck", reflect.TypeOf((*MockUserMetrics)(nil).RecordTagAvailabilityCheck), ctx, available, tag)
}

// RecordUserCreationAttempt mocks base method.
func (m *MockUserMetrics) RecordUserCreationAttempt(ctx context.Context, userType, source string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserCreationAttempt", ctx, userType, source)
}

// RecordUserCreationAttempt indicates an expected call of RecordUserCreationAttempt.
func (mr *MockUserMetricsMockRecorder) RecordUserCreationAttempt(ctx, userType, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserCreationAttempt", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserCreationAttempt), ctx, userType, source)
}

// RecordUserCreationByTag mocks base method.
func (m *MockUserMetrics) RecordUserCreationByTag(ctx context.Context, tag sharedtypes.TagNumber) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserCreationByTag", ctx, tag)
}

// RecordUserCreationByTag indicates an expected call of RecordUserCreationByTag.
func (mr *MockUserMetricsMockRecorder) RecordUserCreationByTag(ctx, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserCreationByTag", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserCreationByTag), ctx, tag)
}

// RecordUserCreationDuration mocks base method.
func (m *MockUserMetrics) RecordUserCreationDuration(ctx context.Context, userType, source string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserCreationDuration", ctx, userType, source, duration)
}

// RecordUserCreationDuration indicates an expected call of RecordUserCreationDuration.
func (mr *MockUserMetricsMockRecorder) RecordUserCreationDuration(ctx, userType, source, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserCreationDuration", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserCreationDuration), ctx, userType, source, duration)
}

// RecordUserCreationFailure mocks base method.
func (m *MockUserMetrics) RecordUserCreationFailure(ctx context.Context, userType, source string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserCreationFailure", ctx, userType, source)
}

// RecordUserCreationFailure indicates an expected call of RecordUserCreationFailure.
func (mr *MockUserMetricsMockRecorder) RecordUserCreationFailure(ctx, userType, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserCreationFailure", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserCreationFailure), ctx, userType, source)
}

// RecordUserCreationSuccess mocks base method.
func (m *MockUserMetrics) RecordUserCreationSuccess(ctx context.Context, userType, source string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserCreationSuccess", ctx, userType, source)
}

// RecordUserCreationSuccess indicates an expected call of RecordUserCreationSuccess.
func (mr *MockUserMetricsMockRecorder) RecordUserCreationSuccess(ctx, userType, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserCreationSuccess", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserCreationSuccess), ctx, userType, source)
}

// RecordUserRetrievalAttempt mocks base method.
func (m *MockUserMetrics) RecordUserRetrievalAttempt(ctx context.Context, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRetrievalAttempt", ctx, userID)
}

// RecordUserRetrievalAttempt indicates an expected call of RecordUserRetrievalAttempt.
func (mr *MockUserMetricsMockRecorder) RecordUserRetrievalAttempt(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRetrievalAttempt", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRetrievalAttempt), ctx, userID)
}

// RecordUserRetrievalDuration mocks base method.
func (m *MockUserMetrics) RecordUserRetrievalDuration(ctx context.Context, userID sharedtypes.DiscordID, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRetrievalDuration", ctx, userID, duration)
}

// RecordUserRetrievalDuration indicates an expected call of RecordUserRetrievalDuration.
func (mr *MockUserMetricsMockRecorder) RecordUserRetrievalDuration(ctx, userID, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRetrievalDuration", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRetrievalDuration), ctx, userID, duration)
}

// RecordUserRetrievalFailure mocks base method.
func (m *MockUserMetrics) RecordUserRetrievalFailure(ctx context.Context, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRetrievalFailure", ctx, userID)
}

// RecordUserRetrievalFailure indicates an expected call of RecordUserRetrievalFailure.
func (mr *MockUserMetricsMockRecorder) RecordUserRetrievalFailure(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRetrievalFailure", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRetrievalFailure), ctx, userID)
}

// RecordUserRetrievalSuccess mocks base method.
func (m *MockUserMetrics) RecordUserRetrievalSuccess(ctx context.Context, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRetrievalSuccess", ctx, userID)
}

// RecordUserRetrievalSuccess indicates an expected call of RecordUserRetrievalSuccess.
func (mr *MockUserMetricsMockRecorder) RecordUserRetrievalSuccess(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRetrievalSuccess", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRetrievalSuccess), ctx, userID)
}

// RecordUserRole mocks base method.
func (m *MockUserMetrics) RecordUserRole(ctx context.Context, userID sharedtypes.DiscordID, role sharedtypes.UserRoleEnum) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRole", ctx, userID, role)
}

// RecordUserRole indicates an expected call of RecordUserRole.
func (mr *MockUserMetricsMockRecorder) RecordUserRole(ctx, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRole", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRole), ctx, userID, role)
}

// RecordUserRoleRetrievalAttempt mocks base method.
func (m *MockUserMetrics) RecordUserRoleRetrievalAttempt(ctx context.Context, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRoleRetrievalAttempt", ctx, userID)
}

// RecordUserRoleRetrievalAttempt indicates an expected call of RecordUserRoleRetrievalAttempt.
func (mr *MockUserMetricsMockRecorder) RecordUserRoleRetrievalAttempt(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRoleRetrievalAttempt", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRoleRetrievalAttempt), ctx, userID)
}

// RecordUserRoleRetrievalDuration mocks base method.
func (m *MockUserMetrics) RecordUserRoleRetrievalDuration(ctx context.Context, userID sharedtypes.DiscordID, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRoleRetrievalDuration", ctx, userID, duration)
}

// RecordUserRoleRetrievalDuration indicates an expected call of RecordUserRoleRetrievalDuration.
func (mr *MockUserMetricsMockRecorder) RecordUserRoleRetrievalDuration(ctx, userID, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRoleRetrievalDuration", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRoleRetrievalDuration), ctx, userID, duration)
}

// RecordUserRoleRetrievalFailure mocks base method.
func (m *MockUserMetrics) RecordUserRoleRetrievalFailure(ctx context.Context, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRoleRetrievalFailure", ctx, userID)
}

// RecordUserRoleRetrievalFailure indicates an expected call of RecordUserRoleRetrievalFailure.
func (mr *MockUserMetricsMockRecorder) RecordUserRoleRetrievalFailure(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRoleRetrievalFailure", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRoleRetrievalFailure), ctx, userID)
}

// RecordUserRoleRetrievalSuccess mocks base method.
func (m *MockUserMetrics) RecordUserRoleRetrievalSuccess(ctx context.Context, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUserRoleRetrievalSuccess", ctx, userID)
}

// RecordUserRoleRetrievalSuccess indicates an expected call of RecordUserRoleRetrievalSuccess.
func (mr *MockUserMetricsMockRecorder) RecordUserRoleRetrievalSuccess(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUserRoleRetrievalSuccess", reflect.TypeOf((*MockUserMetrics)(nil).RecordUserRoleRetrievalSuccess), ctx, userID)
}
