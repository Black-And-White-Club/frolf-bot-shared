// Code generated by MockGen. DO NOT EDIT.
// Source: observability/otel/metrics/score/interface.go
//
// Generated by this command:
//
//	mockgen -source=observability/otel/metrics/score/interface.go -destination=observability/mocks/scoremetrics_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockScoreMetrics is a mock of ScoreMetrics interface.
type MockScoreMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockScoreMetricsMockRecorder
	isgomock struct{}
}

// MockScoreMetricsMockRecorder is the mock recorder for MockScoreMetrics.
type MockScoreMetricsMockRecorder struct {
	mock *MockScoreMetrics
}

// NewMockScoreMetrics creates a new mock instance.
func NewMockScoreMetrics(ctrl *gomock.Controller) *MockScoreMetrics {
	mock := &MockScoreMetrics{ctrl: ctrl}
	mock.recorder = &MockScoreMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreMetrics) EXPECT() *MockScoreMetricsMockRecorder {
	return m.recorder
}

// RecordDBQueryDuration mocks base method.
func (m *MockScoreMetrics) RecordDBQueryDuration(ctx context.Context, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordDBQueryDuration", ctx, duration)
}

// RecordDBQueryDuration indicates an expected call of RecordDBQueryDuration.
func (mr *MockScoreMetricsMockRecorder) RecordDBQueryDuration(ctx, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordDBQueryDuration", reflect.TypeOf((*MockScoreMetrics)(nil).RecordDBQueryDuration), ctx, duration)
}

// RecordHandlerAttempt mocks base method.
func (m *MockScoreMetrics) RecordHandlerAttempt(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerAttempt", ctx, handlerName)
}

// RecordHandlerAttempt indicates an expected call of RecordHandlerAttempt.
func (mr *MockScoreMetricsMockRecorder) RecordHandlerAttempt(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerAttempt", reflect.TypeOf((*MockScoreMetrics)(nil).RecordHandlerAttempt), ctx, handlerName)
}

// RecordHandlerDuration mocks base method.
func (m *MockScoreMetrics) RecordHandlerDuration(ctx context.Context, handlerName string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerDuration", ctx, handlerName, duration)
}

// RecordHandlerDuration indicates an expected call of RecordHandlerDuration.
func (mr *MockScoreMetricsMockRecorder) RecordHandlerDuration(ctx, handlerName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerDuration", reflect.TypeOf((*MockScoreMetrics)(nil).RecordHandlerDuration), ctx, handlerName, duration)
}

// RecordHandlerFailure mocks base method.
func (m *MockScoreMetrics) RecordHandlerFailure(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerFailure", ctx, handlerName)
}

// RecordHandlerFailure indicates an expected call of RecordHandlerFailure.
func (mr *MockScoreMetricsMockRecorder) RecordHandlerFailure(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerFailure", reflect.TypeOf((*MockScoreMetrics)(nil).RecordHandlerFailure), ctx, handlerName)
}

// RecordHandlerSuccess mocks base method.
func (m *MockScoreMetrics) RecordHandlerSuccess(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerSuccess", ctx, handlerName)
}

// RecordHandlerSuccess indicates an expected call of RecordHandlerSuccess.
func (mr *MockScoreMetricsMockRecorder) RecordHandlerSuccess(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerSuccess", reflect.TypeOf((*MockScoreMetrics)(nil).RecordHandlerSuccess), ctx, handlerName)
}

// RecordLeaderboardUpdateAttempt mocks base method.
func (m *MockScoreMetrics) RecordLeaderboardUpdateAttempt(ctx context.Context, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardUpdateAttempt", ctx, roundID)
}

// RecordLeaderboardUpdateAttempt indicates an expected call of RecordLeaderboardUpdateAttempt.
func (mr *MockScoreMetricsMockRecorder) RecordLeaderboardUpdateAttempt(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardUpdateAttempt", reflect.TypeOf((*MockScoreMetrics)(nil).RecordLeaderboardUpdateAttempt), ctx, roundID)
}

// RecordLeaderboardUpdateDuration mocks base method.
func (m *MockScoreMetrics) RecordLeaderboardUpdateDuration(ctx context.Context, roundID sharedtypes.RoundID, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardUpdateDuration", ctx, roundID, duration)
}

// RecordLeaderboardUpdateDuration indicates an expected call of RecordLeaderboardUpdateDuration.
func (mr *MockScoreMetricsMockRecorder) RecordLeaderboardUpdateDuration(ctx, roundID, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardUpdateDuration", reflect.TypeOf((*MockScoreMetrics)(nil).RecordLeaderboardUpdateDuration), ctx, roundID, duration)
}

// RecordLeaderboardUpdateFailure mocks base method.
func (m *MockScoreMetrics) RecordLeaderboardUpdateFailure(ctx context.Context, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardUpdateFailure", ctx, roundID)
}

// RecordLeaderboardUpdateFailure indicates an expected call of RecordLeaderboardUpdateFailure.
func (mr *MockScoreMetricsMockRecorder) RecordLeaderboardUpdateFailure(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardUpdateFailure", reflect.TypeOf((*MockScoreMetrics)(nil).RecordLeaderboardUpdateFailure), ctx, roundID)
}

// RecordLeaderboardUpdateSuccess mocks base method.
func (m *MockScoreMetrics) RecordLeaderboardUpdateSuccess(ctx context.Context, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardUpdateSuccess", ctx, roundID)
}

// RecordLeaderboardUpdateSuccess indicates an expected call of RecordLeaderboardUpdateSuccess.
func (mr *MockScoreMetricsMockRecorder) RecordLeaderboardUpdateSuccess(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardUpdateSuccess", reflect.TypeOf((*MockScoreMetrics)(nil).RecordLeaderboardUpdateSuccess), ctx, roundID)
}

// RecordOperationAttempt mocks base method.
func (m *MockScoreMetrics) RecordOperationAttempt(ctx context.Context, operationName string, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationAttempt", ctx, operationName, roundID)
}

// RecordOperationAttempt indicates an expected call of RecordOperationAttempt.
func (mr *MockScoreMetricsMockRecorder) RecordOperationAttempt(ctx, operationName, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationAttempt", reflect.TypeOf((*MockScoreMetrics)(nil).RecordOperationAttempt), ctx, operationName, roundID)
}

// RecordOperationDuration mocks base method.
func (m *MockScoreMetrics) RecordOperationDuration(ctx context.Context, operationName string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationDuration", ctx, operationName, duration)
}

// RecordOperationDuration indicates an expected call of RecordOperationDuration.
func (mr *MockScoreMetricsMockRecorder) RecordOperationDuration(ctx, operationName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationDuration", reflect.TypeOf((*MockScoreMetrics)(nil).RecordOperationDuration), ctx, operationName, duration)
}

// RecordOperationFailure mocks base method.
func (m *MockScoreMetrics) RecordOperationFailure(ctx context.Context, operationName string, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationFailure", ctx, operationName, roundID)
}

// RecordOperationFailure indicates an expected call of RecordOperationFailure.
func (mr *MockScoreMetricsMockRecorder) RecordOperationFailure(ctx, operationName, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationFailure", reflect.TypeOf((*MockScoreMetrics)(nil).RecordOperationFailure), ctx, operationName, roundID)
}

// RecordOperationSuccess mocks base method.
func (m *MockScoreMetrics) RecordOperationSuccess(ctx context.Context, operationName string, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationSuccess", ctx, operationName, roundID)
}

// RecordOperationSuccess indicates an expected call of RecordOperationSuccess.
func (mr *MockScoreMetricsMockRecorder) RecordOperationSuccess(ctx, operationName, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationSuccess", reflect.TypeOf((*MockScoreMetrics)(nil).RecordOperationSuccess), ctx, operationName, roundID)
}

// RecordPlayerScore mocks base method.
func (m *MockScoreMetrics) RecordPlayerScore(ctx context.Context, roundID sharedtypes.RoundID, userID sharedtypes.DiscordID, score sharedtypes.Score) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordPlayerScore", ctx, roundID, userID, score)
}

// RecordPlayerScore indicates an expected call of RecordPlayerScore.
func (mr *MockScoreMetricsMockRecorder) RecordPlayerScore(ctx, roundID, userID, score any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordPlayerScore", reflect.TypeOf((*MockScoreMetrics)(nil).RecordPlayerScore), ctx, roundID, userID, score)
}

// RecordPlayerScoresBatch mocks base method.
func (m *MockScoreMetrics) RecordPlayerScoresBatch(ctx context.Context, roundID sharedtypes.RoundID, playerScores map[sharedtypes.DiscordID]sharedtypes.Score) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordPlayerScoresBatch", ctx, roundID, playerScores)
}

// RecordPlayerScoresBatch indicates an expected call of RecordPlayerScoresBatch.
func (mr *MockScoreMetricsMockRecorder) RecordPlayerScoresBatch(ctx, roundID, playerScores any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordPlayerScoresBatch", reflect.TypeOf((*MockScoreMetrics)(nil).RecordPlayerScoresBatch), ctx, roundID, playerScores)
}

// RecordPlayerTag mocks base method.
func (m *MockScoreMetrics) RecordPlayerTag(ctx context.Context, roundID sharedtypes.RoundID, userID sharedtypes.DiscordID, tagNumber *sharedtypes.TagNumber) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordPlayerTag", ctx, roundID, userID, tagNumber)
}

// RecordPlayerTag indicates an expected call of RecordPlayerTag.
func (mr *MockScoreMetricsMockRecorder) RecordPlayerTag(ctx, roundID, userID, tagNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordPlayerTag", reflect.TypeOf((*MockScoreMetrics)(nil).RecordPlayerTag), ctx, roundID, userID, tagNumber)
}

// RecordPlayerTagsBatch mocks base method.
func (m *MockScoreMetrics) RecordPlayerTagsBatch(ctx context.Context, roundID sharedtypes.RoundID, playerTags map[sharedtypes.DiscordID]*sharedtypes.TagNumber) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordPlayerTagsBatch", ctx, roundID, playerTags)
}

// RecordPlayerTagsBatch indicates an expected call of RecordPlayerTagsBatch.
func (mr *MockScoreMetricsMockRecorder) RecordPlayerTagsBatch(ctx, roundID, playerTags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordPlayerTagsBatch", reflect.TypeOf((*MockScoreMetrics)(nil).RecordPlayerTagsBatch), ctx, roundID, playerTags)
}

// RecordRoundScoresProcessingAttempt mocks base method.
func (m *MockScoreMetrics) RecordRoundScoresProcessingAttempt(ctx context.Context, success bool, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoundScoresProcessingAttempt", ctx, success, roundID)
}

// RecordRoundScoresProcessingAttempt indicates an expected call of RecordRoundScoresProcessingAttempt.
func (mr *MockScoreMetricsMockRecorder) RecordRoundScoresProcessingAttempt(ctx, success, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoundScoresProcessingAttempt", reflect.TypeOf((*MockScoreMetrics)(nil).RecordRoundScoresProcessingAttempt), ctx, success, roundID)
}

// RecordScoreCorrectionAttempt mocks base method.
func (m *MockScoreMetrics) RecordScoreCorrectionAttempt(ctx context.Context, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordScoreCorrectionAttempt", ctx, roundID)
}

// RecordScoreCorrectionAttempt indicates an expected call of RecordScoreCorrectionAttempt.
func (mr *MockScoreMetricsMockRecorder) RecordScoreCorrectionAttempt(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordScoreCorrectionAttempt", reflect.TypeOf((*MockScoreMetrics)(nil).RecordScoreCorrectionAttempt), ctx, roundID)
}

// RecordScoreCorrectionDuration mocks base method.
func (m *MockScoreMetrics) RecordScoreCorrectionDuration(ctx context.Context, roundID sharedtypes.RoundID, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordScoreCorrectionDuration", ctx, roundID, duration)
}

// RecordScoreCorrectionDuration indicates an expected call of RecordScoreCorrectionDuration.
func (mr *MockScoreMetricsMockRecorder) RecordScoreCorrectionDuration(ctx, roundID, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordScoreCorrectionDuration", reflect.TypeOf((*MockScoreMetrics)(nil).RecordScoreCorrectionDuration), ctx, roundID, duration)
}

// RecordScoreCorrectionFailure mocks base method.
func (m *MockScoreMetrics) RecordScoreCorrectionFailure(ctx context.Context, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordScoreCorrectionFailure", ctx, roundID)
}

// RecordScoreCorrectionFailure indicates an expected call of RecordScoreCorrectionFailure.
func (mr *MockScoreMetricsMockRecorder) RecordScoreCorrectionFailure(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordScoreCorrectionFailure", reflect.TypeOf((*MockScoreMetrics)(nil).RecordScoreCorrectionFailure), ctx, roundID)
}

// RecordScoreCorrectionSuccess mocks base method.
func (m *MockScoreMetrics) RecordScoreCorrectionSuccess(ctx context.Context, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordScoreCorrectionSuccess", ctx, roundID)
}

// RecordScoreCorrectionSuccess indicates an expected call of RecordScoreCorrectionSuccess.
func (mr *MockScoreMetricsMockRecorder) RecordScoreCorrectionSuccess(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordScoreCorrectionSuccess", reflect.TypeOf((*MockScoreMetrics)(nil).RecordScoreCorrectionSuccess), ctx, roundID)
}

// RecordScoreProcessingAttempt mocks base method.
func (m *MockScoreMetrics) RecordScoreProcessingAttempt(ctx context.Context, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordScoreProcessingAttempt", ctx, roundID)
}

// RecordScoreProcessingAttempt indicates an expected call of RecordScoreProcessingAttempt.
func (mr *MockScoreMetricsMockRecorder) RecordScoreProcessingAttempt(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordScoreProcessingAttempt", reflect.TypeOf((*MockScoreMetrics)(nil).RecordScoreProcessingAttempt), ctx, roundID)
}

// RecordScoreProcessingDuration mocks base method.
func (m *MockScoreMetrics) RecordScoreProcessingDuration(ctx context.Context, roundID sharedtypes.RoundID, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordScoreProcessingDuration", ctx, roundID, duration)
}

// RecordScoreProcessingDuration indicates an expected call of RecordScoreProcessingDuration.
func (mr *MockScoreMetricsMockRecorder) RecordScoreProcessingDuration(ctx, roundID, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordScoreProcessingDuration", reflect.TypeOf((*MockScoreMetrics)(nil).RecordScoreProcessingDuration), ctx, roundID, duration)
}

// RecordScoreProcessingFailure mocks base method.
func (m *MockScoreMetrics) RecordScoreProcessingFailure(ctx context.Context, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordScoreProcessingFailure", ctx, roundID)
}

// RecordScoreProcessingFailure indicates an expected call of RecordScoreProcessingFailure.
func (mr *MockScoreMetricsMockRecorder) RecordScoreProcessingFailure(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordScoreProcessingFailure", reflect.TypeOf((*MockScoreMetrics)(nil).RecordScoreProcessingFailure), ctx, roundID)
}

// RecordScoreProcessingSuccess mocks base method.
func (m *MockScoreMetrics) RecordScoreProcessingSuccess(ctx context.Context, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordScoreProcessingSuccess", ctx, roundID)
}

// RecordScoreProcessingSuccess indicates an expected call of RecordScoreProcessingSuccess.
func (mr *MockScoreMetricsMockRecorder) RecordScoreProcessingSuccess(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordScoreProcessingSuccess", reflect.TypeOf((*MockScoreMetrics)(nil).RecordScoreProcessingSuccess), ctx, roundID)
}

// RecordScoreSortingDuration mocks base method.
func (m *MockScoreMetrics) RecordScoreSortingDuration(ctx context.Context, roundID sharedtypes.RoundID, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordScoreSortingDuration", ctx, roundID, duration)
}

// RecordScoreSortingDuration indicates an expected call of RecordScoreSortingDuration.
func (mr *MockScoreMetricsMockRecorder) RecordScoreSortingDuration(ctx, roundID, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordScoreSortingDuration", reflect.TypeOf((*MockScoreMetrics)(nil).RecordScoreSortingDuration), ctx, roundID, duration)
}

// RecordScoreUpdateAttempt mocks base method.
func (m *MockScoreMetrics) RecordScoreUpdateAttempt(ctx context.Context, success bool, roundID sharedtypes.RoundID, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordScoreUpdateAttempt", ctx, success, roundID, userID)
}

// RecordScoreUpdateAttempt indicates an expected call of RecordScoreUpdateAttempt.
func (mr *MockScoreMetricsMockRecorder) RecordScoreUpdateAttempt(ctx, success, roundID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordScoreUpdateAttempt", reflect.TypeOf((*MockScoreMetrics)(nil).RecordScoreUpdateAttempt), ctx, success, roundID, userID)
}

// RecordScoresProcessed mocks base method.
func (m *MockScoreMetrics) RecordScoresProcessed(ctx context.Context, roundID sharedtypes.RoundID, numScores int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordScoresProcessed", ctx, roundID, numScores)
}

// RecordScoresProcessed indicates an expected call of RecordScoresProcessed.
func (mr *MockScoreMetricsMockRecorder) RecordScoresProcessed(ctx, roundID, numScores any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordScoresProcessed", reflect.TypeOf((*MockScoreMetrics)(nil).RecordScoresProcessed), ctx, roundID, numScores)
}

// RecordTagExtractionDuration mocks base method.
func (m *MockScoreMetrics) RecordTagExtractionDuration(ctx context.Context, roundID sharedtypes.RoundID, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagExtractionDuration", ctx, roundID, duration)
}

// RecordTagExtractionDuration indicates an expected call of RecordTagExtractionDuration.
func (mr *MockScoreMetricsMockRecorder) RecordTagExtractionDuration(ctx, roundID, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagExtractionDuration", reflect.TypeOf((*MockScoreMetrics)(nil).RecordTagExtractionDuration), ctx, roundID, duration)
}

// RecordTagMovement mocks base method.
func (m *MockScoreMetrics) RecordTagMovement(ctx context.Context, roundID sharedtypes.RoundID, tagNumber *sharedtypes.TagNumber, fromUserID, toUserID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagMovement", ctx, roundID, tagNumber, fromUserID, toUserID)
}

// RecordTagMovement indicates an expected call of RecordTagMovement.
func (mr *MockScoreMetricsMockRecorder) RecordTagMovement(ctx, roundID, tagNumber, fromUserID, toUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagMovement", reflect.TypeOf((*MockScoreMetrics)(nil).RecordTagMovement), ctx, roundID, tagNumber, fromUserID, toUserID)
}

// RecordTagPerformance mocks base method.
func (m *MockScoreMetrics) RecordTagPerformance(ctx context.Context, roundID sharedtypes.RoundID, tagNumber *sharedtypes.TagNumber, score sharedtypes.Score) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagPerformance", ctx, roundID, tagNumber, score)
}

// RecordTagPerformance indicates an expected call of RecordTagPerformance.
func (mr *MockScoreMetricsMockRecorder) RecordTagPerformance(ctx, roundID, tagNumber, score any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagPerformance", reflect.TypeOf((*MockScoreMetrics)(nil).RecordTagPerformance), ctx, roundID, tagNumber, score)
}

// RecordTagPerformanceBatch mocks base method.
func (m *MockScoreMetrics) RecordTagPerformanceBatch(ctx context.Context, roundID sharedtypes.RoundID, tagPerformance map[*sharedtypes.TagNumber]sharedtypes.Score) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagPerformanceBatch", ctx, roundID, tagPerformance)
}

// RecordTagPerformanceBatch indicates an expected call of RecordTagPerformanceBatch.
func (mr *MockScoreMetricsMockRecorder) RecordTagPerformanceBatch(ctx, roundID, tagPerformance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagPerformanceBatch", reflect.TypeOf((*MockScoreMetrics)(nil).RecordTagPerformanceBatch), ctx, roundID, tagPerformance)
}

// RecordTaggedPlayersProcessed mocks base method.
func (m *MockScoreMetrics) RecordTaggedPlayersProcessed(ctx context.Context, roundID sharedtypes.RoundID, numTaggedPlayers int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTaggedPlayersProcessed", ctx, roundID, numTaggedPlayers)
}

// RecordTaggedPlayersProcessed indicates an expected call of RecordTaggedPlayersProcessed.
func (mr *MockScoreMetricsMockRecorder) RecordTaggedPlayersProcessed(ctx, roundID, numTaggedPlayers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTaggedPlayersProcessed", reflect.TypeOf((*MockScoreMetrics)(nil).RecordTaggedPlayersProcessed), ctx, roundID, numTaggedPlayers)
}

// RecordUntaggedPlayer mocks base method.
func (m *MockScoreMetrics) RecordUntaggedPlayer(ctx context.Context, roundID sharedtypes.RoundID, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUntaggedPlayer", ctx, roundID, userID)
}

// RecordUntaggedPlayer indicates an expected call of RecordUntaggedPlayer.
func (mr *MockScoreMetricsMockRecorder) RecordUntaggedPlayer(ctx, roundID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUntaggedPlayer", reflect.TypeOf((*MockScoreMetrics)(nil).RecordUntaggedPlayer), ctx, roundID, userID)
}

// RecordUntaggedPlayersBatch mocks base method.
func (m *MockScoreMetrics) RecordUntaggedPlayersBatch(ctx context.Context, roundID sharedtypes.RoundID, untaggedPlayers []sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUntaggedPlayersBatch", ctx, roundID, untaggedPlayers)
}

// RecordUntaggedPlayersBatch indicates an expected call of RecordUntaggedPlayersBatch.
func (mr *MockScoreMetricsMockRecorder) RecordUntaggedPlayersBatch(ctx, roundID, untaggedPlayers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUntaggedPlayersBatch", reflect.TypeOf((*MockScoreMetrics)(nil).RecordUntaggedPlayersBatch), ctx, roundID, untaggedPlayers)
}

// RecordUntaggedPlayersProcessed mocks base method.
func (m *MockScoreMetrics) RecordUntaggedPlayersProcessed(ctx context.Context, roundID sharedtypes.RoundID, numUntaggedPlayers int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordUntaggedPlayersProcessed", ctx, roundID, numUntaggedPlayers)
}

// RecordUntaggedPlayersProcessed indicates an expected call of RecordUntaggedPlayersProcessed.
func (mr *MockScoreMetricsMockRecorder) RecordUntaggedPlayersProcessed(ctx, roundID, numUntaggedPlayers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUntaggedPlayersProcessed", reflect.TypeOf((*MockScoreMetrics)(nil).RecordUntaggedPlayersProcessed), ctx, roundID, numUntaggedPlayers)
}
