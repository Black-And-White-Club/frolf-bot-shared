// Code generated by MockGen. DO NOT EDIT.
// Source: observability/prometheus/prometheus.go
//
// Generated by this command:
//
//	mockgen -source=observability/prometheus/prometheus.go -destination=observability/mocks/prometheus_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	prometheusfrolfbot "github.com/Black-And-White-Club/frolf-bot-shared/observability/prometheus"
	databasemetrics "github.com/Black-And-White-Club/frolf-bot-shared/observability/prometheus/database"
	eventbusmetrics "github.com/Black-And-White-Club/frolf-bot-shared/observability/prometheus/eventbus"
	usermetrics "github.com/Black-And-White-Club/frolf-bot-shared/observability/prometheus/user"
	gomock "go.uber.org/mock/gomock"
)

// MockHealthChecker is a mock of HealthChecker interface.
type MockHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerMockRecorder
	isgomock struct{}
}

// MockHealthCheckerMockRecorder is the mock recorder for MockHealthChecker.
type MockHealthCheckerMockRecorder struct {
	mock *MockHealthChecker
}

// NewMockHealthChecker creates a new mock instance.
func NewMockHealthChecker(ctrl *gomock.Controller) *MockHealthChecker {
	mock := &MockHealthChecker{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthChecker) EXPECT() *MockHealthCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockHealthChecker) Check(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockHealthCheckerMockRecorder) Check(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockHealthChecker)(nil).Check), ctx)
}

// Name mocks base method.
func (m *MockHealthChecker) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockHealthCheckerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockHealthChecker)(nil).Name))
}

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
	isgomock struct{}
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// DatabaseMetrics mocks base method.
func (m *MockMetrics) DatabaseMetrics() databasemetrics.DatabaseMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseMetrics")
	ret0, _ := ret[0].(databasemetrics.DatabaseMetrics)
	return ret0
}

// DatabaseMetrics indicates an expected call of DatabaseMetrics.
func (mr *MockMetricsMockRecorder) DatabaseMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseMetrics", reflect.TypeOf((*MockMetrics)(nil).DatabaseMetrics))
}

// EventBusMetrics mocks base method.
func (m *MockMetrics) EventBusMetrics() eventbusmetrics.EventBusMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventBusMetrics")
	ret0, _ := ret[0].(eventbusmetrics.EventBusMetrics)
	return ret0
}

// EventBusMetrics indicates an expected call of EventBusMetrics.
func (mr *MockMetricsMockRecorder) EventBusMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventBusMetrics", reflect.TypeOf((*MockMetrics)(nil).EventBusMetrics))
}

// GetMetrics mocks base method.
func (m *MockMetrics) GetMetrics() (usermetrics.UserMetrics, databasemetrics.DatabaseMetrics, eventbusmetrics.EventBusMetrics) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(usermetrics.UserMetrics)
	ret1, _ := ret[1].(databasemetrics.DatabaseMetrics)
	ret2, _ := ret[2].(eventbusmetrics.EventBusMetrics)
	return ret0, ret1, ret2
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockMetricsMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMetrics)(nil).GetMetrics))
}

// HealthCheck mocks base method.
func (m *MockMetrics) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockMetricsMockRecorder) HealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockMetrics)(nil).HealthCheck), ctx)
}

// PerformHealthChecks mocks base method.
func (m *MockMetrics) PerformHealthChecks(ctx context.Context) map[string]error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformHealthChecks", ctx)
	ret0, _ := ret[0].(map[string]error)
	return ret0
}

// PerformHealthChecks indicates an expected call of PerformHealthChecks.
func (mr *MockMetricsMockRecorder) PerformHealthChecks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformHealthChecks", reflect.TypeOf((*MockMetrics)(nil).PerformHealthChecks), ctx)
}

// RegisterHealthChecker mocks base method.
func (m *MockMetrics) RegisterHealthChecker(checker prometheusfrolfbot.HealthChecker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHealthChecker", checker)
}

// RegisterHealthChecker indicates an expected call of RegisterHealthChecker.
func (mr *MockMetricsMockRecorder) RegisterHealthChecker(checker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHealthChecker", reflect.TypeOf((*MockMetrics)(nil).RegisterHealthChecker), checker)
}

// Start mocks base method.
func (m *MockMetrics) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMetricsMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMetrics)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockMetrics) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockMetricsMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMetrics)(nil).Stop), ctx)
}

// UserMetrics mocks base method.
func (m *MockMetrics) UserMetrics() usermetrics.UserMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserMetrics")
	ret0, _ := ret[0].(usermetrics.UserMetrics)
	return ret0
}

// UserMetrics indicates an expected call of UserMetrics.
func (mr *MockMetricsMockRecorder) UserMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserMetrics", reflect.TypeOf((*MockMetrics)(nil).UserMetrics))
}
