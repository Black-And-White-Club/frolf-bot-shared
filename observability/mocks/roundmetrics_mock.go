// Code generated by MockGen. DO NOT EDIT.
// Source: observability/otel/metrics/round/interface.go
//
// Generated by this command:
//
//	mockgen -source=observability/otel/metrics/round/interface.go -destination=observability/mocks/roundmetrics_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRoundMetrics is a mock of RoundMetrics interface.
type MockRoundMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockRoundMetricsMockRecorder
	isgomock struct{}
}

// MockRoundMetricsMockRecorder is the mock recorder for MockRoundMetrics.
type MockRoundMetricsMockRecorder struct {
	mock *MockRoundMetrics
}

// NewMockRoundMetrics creates a new mock instance.
func NewMockRoundMetrics(ctrl *gomock.Controller) *MockRoundMetrics {
	mock := &MockRoundMetrics{ctrl: ctrl}
	mock.recorder = &MockRoundMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoundMetrics) EXPECT() *MockRoundMetricsMockRecorder {
	return m.recorder
}

// RecordDBOperationDuration mocks base method.
func (m *MockRoundMetrics) RecordDBOperationDuration(ctx context.Context, operation string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordDBOperationDuration", ctx, operation, duration)
}

// RecordDBOperationDuration indicates an expected call of RecordDBOperationDuration.
func (mr *MockRoundMetricsMockRecorder) RecordDBOperationDuration(ctx, operation, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordDBOperationDuration", reflect.TypeOf((*MockRoundMetrics)(nil).RecordDBOperationDuration), ctx, operation, duration)
}

// RecordDBOperationError mocks base method.
func (m *MockRoundMetrics) RecordDBOperationError(ctx context.Context, operation string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordDBOperationError", ctx, operation)
}

// RecordDBOperationError indicates an expected call of RecordDBOperationError.
func (mr *MockRoundMetricsMockRecorder) RecordDBOperationError(ctx, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordDBOperationError", reflect.TypeOf((*MockRoundMetrics)(nil).RecordDBOperationError), ctx, operation)
}

// RecordDBOperationSuccess mocks base method.
func (m *MockRoundMetrics) RecordDBOperationSuccess(ctx context.Context, operation string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordDBOperationSuccess", ctx, operation)
}

// RecordDBOperationSuccess indicates an expected call of RecordDBOperationSuccess.
func (mr *MockRoundMetricsMockRecorder) RecordDBOperationSuccess(ctx, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordDBOperationSuccess", reflect.TypeOf((*MockRoundMetrics)(nil).RecordDBOperationSuccess), ctx, operation)
}

// RecordHandlerAttempt mocks base method.
func (m *MockRoundMetrics) RecordHandlerAttempt(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerAttempt", ctx, handlerName)
}

// RecordHandlerAttempt indicates an expected call of RecordHandlerAttempt.
func (mr *MockRoundMetricsMockRecorder) RecordHandlerAttempt(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerAttempt", reflect.TypeOf((*MockRoundMetrics)(nil).RecordHandlerAttempt), ctx, handlerName)
}

// RecordHandlerDuration mocks base method.
func (m *MockRoundMetrics) RecordHandlerDuration(ctx context.Context, handlerName string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerDuration", ctx, handlerName, duration)
}

// RecordHandlerDuration indicates an expected call of RecordHandlerDuration.
func (mr *MockRoundMetricsMockRecorder) RecordHandlerDuration(ctx, handlerName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerDuration", reflect.TypeOf((*MockRoundMetrics)(nil).RecordHandlerDuration), ctx, handlerName, duration)
}

// RecordHandlerFailure mocks base method.
func (m *MockRoundMetrics) RecordHandlerFailure(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerFailure", ctx, handlerName)
}

// RecordHandlerFailure indicates an expected call of RecordHandlerFailure.
func (mr *MockRoundMetricsMockRecorder) RecordHandlerFailure(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerFailure", reflect.TypeOf((*MockRoundMetrics)(nil).RecordHandlerFailure), ctx, handlerName)
}

// RecordHandlerSuccess mocks base method.
func (m *MockRoundMetrics) RecordHandlerSuccess(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerSuccess", ctx, handlerName)
}

// RecordHandlerSuccess indicates an expected call of RecordHandlerSuccess.
func (mr *MockRoundMetricsMockRecorder) RecordHandlerSuccess(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerSuccess", reflect.TypeOf((*MockRoundMetrics)(nil).RecordHandlerSuccess), ctx, handlerName)
}

// RecordOperationAttempt mocks base method.
func (m *MockRoundMetrics) RecordOperationAttempt(ctx context.Context, operation, service string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationAttempt", ctx, operation, service)
}

// RecordOperationAttempt indicates an expected call of RecordOperationAttempt.
func (mr *MockRoundMetricsMockRecorder) RecordOperationAttempt(ctx, operation, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationAttempt", reflect.TypeOf((*MockRoundMetrics)(nil).RecordOperationAttempt), ctx, operation, service)
}

// RecordOperationDuration mocks base method.
func (m *MockRoundMetrics) RecordOperationDuration(ctx context.Context, operation, service string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationDuration", ctx, operation, service, duration)
}

// RecordOperationDuration indicates an expected call of RecordOperationDuration.
func (mr *MockRoundMetricsMockRecorder) RecordOperationDuration(ctx, operation, service, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationDuration", reflect.TypeOf((*MockRoundMetrics)(nil).RecordOperationDuration), ctx, operation, service, duration)
}

// RecordOperationFailure mocks base method.
func (m *MockRoundMetrics) RecordOperationFailure(ctx context.Context, operation, service string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationFailure", ctx, operation, service)
}

// RecordOperationFailure indicates an expected call of RecordOperationFailure.
func (mr *MockRoundMetricsMockRecorder) RecordOperationFailure(ctx, operation, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationFailure", reflect.TypeOf((*MockRoundMetrics)(nil).RecordOperationFailure), ctx, operation, service)
}

// RecordOperationSuccess mocks base method.
func (m *MockRoundMetrics) RecordOperationSuccess(ctx context.Context, operation, service string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationSuccess", ctx, operation, service)
}

// RecordOperationSuccess indicates an expected call of RecordOperationSuccess.
func (mr *MockRoundMetricsMockRecorder) RecordOperationSuccess(ctx, operation, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationSuccess", reflect.TypeOf((*MockRoundMetrics)(nil).RecordOperationSuccess), ctx, operation, service)
}

// RecordRoundCancelled mocks base method.
func (m *MockRoundMetrics) RecordRoundCancelled(ctx context.Context, location string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoundCancelled", ctx, location)
}

// RecordRoundCancelled indicates an expected call of RecordRoundCancelled.
func (mr *MockRoundMetricsMockRecorder) RecordRoundCancelled(ctx, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoundCancelled", reflect.TypeOf((*MockRoundMetrics)(nil).RecordRoundCancelled), ctx, location)
}

// RecordRoundCreated mocks base method.
func (m *MockRoundMetrics) RecordRoundCreated(ctx context.Context, location string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoundCreated", ctx, location)
}

// RecordRoundCreated indicates an expected call of RecordRoundCreated.
func (mr *MockRoundMetricsMockRecorder) RecordRoundCreated(ctx, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoundCreated", reflect.TypeOf((*MockRoundMetrics)(nil).RecordRoundCreated), ctx, location)
}

// RecordRoundDeleteAttempt mocks base method.
func (m *MockRoundMetrics) RecordRoundDeleteAttempt(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoundDeleteAttempt", ctx)
}

// RecordRoundDeleteAttempt indicates an expected call of RecordRoundDeleteAttempt.
func (mr *MockRoundMetricsMockRecorder) RecordRoundDeleteAttempt(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoundDeleteAttempt", reflect.TypeOf((*MockRoundMetrics)(nil).RecordRoundDeleteAttempt), ctx)
}

// RecordRoundDeleteFailure mocks base method.
func (m *MockRoundMetrics) RecordRoundDeleteFailure(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoundDeleteFailure", ctx)
}

// RecordRoundDeleteFailure indicates an expected call of RecordRoundDeleteFailure.
func (mr *MockRoundMetricsMockRecorder) RecordRoundDeleteFailure(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoundDeleteFailure", reflect.TypeOf((*MockRoundMetrics)(nil).RecordRoundDeleteFailure), ctx)
}

// RecordRoundDeleteSuccess mocks base method.
func (m *MockRoundMetrics) RecordRoundDeleteSuccess(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoundDeleteSuccess", ctx)
}

// RecordRoundDeleteSuccess indicates an expected call of RecordRoundDeleteSuccess.
func (mr *MockRoundMetricsMockRecorder) RecordRoundDeleteSuccess(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoundDeleteSuccess", reflect.TypeOf((*MockRoundMetrics)(nil).RecordRoundDeleteSuccess), ctx)
}

// RecordRoundFinalized mocks base method.
func (m *MockRoundMetrics) RecordRoundFinalized(ctx context.Context, location string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoundFinalized", ctx, location)
}

// RecordRoundFinalized indicates an expected call of RecordRoundFinalized.
func (mr *MockRoundMetricsMockRecorder) RecordRoundFinalized(ctx, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoundFinalized", reflect.TypeOf((*MockRoundMetrics)(nil).RecordRoundFinalized), ctx, location)
}

// RecordRoundParticipantAdded mocks base method.
func (m *MockRoundMetrics) RecordRoundParticipantAdded(ctx context.Context, location string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordRoundParticipantAdded", ctx, location)
}

// RecordRoundParticipantAdded indicates an expected call of RecordRoundParticipantAdded.
func (mr *MockRoundMetricsMockRecorder) RecordRoundParticipantAdded(ctx, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoundParticipantAdded", reflect.TypeOf((*MockRoundMetrics)(nil).RecordRoundParticipantAdded), ctx, location)
}

// RecordTimeParsingError mocks base method.
func (m *MockRoundMetrics) RecordTimeParsingError(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTimeParsingError", ctx)
}

// RecordTimeParsingError indicates an expected call of RecordTimeParsingError.
func (mr *MockRoundMetricsMockRecorder) RecordTimeParsingError(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTimeParsingError", reflect.TypeOf((*MockRoundMetrics)(nil).RecordTimeParsingError), ctx)
}

// RecordTimeParsingSuccess mocks base method.
func (m *MockRoundMetrics) RecordTimeParsingSuccess(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTimeParsingSuccess", ctx)
}

// RecordTimeParsingSuccess indicates an expected call of RecordTimeParsingSuccess.
func (mr *MockRoundMetricsMockRecorder) RecordTimeParsingSuccess(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTimeParsingSuccess", reflect.TypeOf((*MockRoundMetrics)(nil).RecordTimeParsingSuccess), ctx)
}

// RecordValidationError mocks base method.
func (m *MockRoundMetrics) RecordValidationError(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordValidationError", ctx)
}

// RecordValidationError indicates an expected call of RecordValidationError.
func (mr *MockRoundMetricsMockRecorder) RecordValidationError(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordValidationError", reflect.TypeOf((*MockRoundMetrics)(nil).RecordValidationError), ctx)
}

// RecordValidationSuccess mocks base method.
func (m *MockRoundMetrics) RecordValidationSuccess(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordValidationSuccess", ctx)
}

// RecordValidationSuccess indicates an expected call of RecordValidationSuccess.
func (mr *MockRoundMetricsMockRecorder) RecordValidationSuccess(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordValidationSuccess", reflect.TypeOf((*MockRoundMetrics)(nil).RecordValidationSuccess), ctx)
}
