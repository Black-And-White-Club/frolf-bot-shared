// Code generated by MockGen. DO NOT EDIT.
// Source: observability/otel/metrics/leaderboard/interface.go
//
// Generated by this command:
//
//	mockgen -source=observability/otel/metrics/leaderboard/interface.go -destination=observability/mocks/leaderboard_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockLeaderboardMetrics is a mock of LeaderboardMetrics interface.
type MockLeaderboardMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardMetricsMockRecorder
	isgomock struct{}
}

// MockLeaderboardMetricsMockRecorder is the mock recorder for MockLeaderboardMetrics.
type MockLeaderboardMetricsMockRecorder struct {
	mock *MockLeaderboardMetrics
}

// NewMockLeaderboardMetrics creates a new mock instance.
func NewMockLeaderboardMetrics(ctrl *gomock.Controller) *MockLeaderboardMetrics {
	mock := &MockLeaderboardMetrics{ctrl: ctrl}
	mock.recorder = &MockLeaderboardMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderboardMetrics) EXPECT() *MockLeaderboardMetricsMockRecorder {
	return m.recorder
}

// RecordHandlerAttempt mocks base method.
func (m *MockLeaderboardMetrics) RecordHandlerAttempt(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerAttempt", ctx, handlerName)
}

// RecordHandlerAttempt indicates an expected call of RecordHandlerAttempt.
func (mr *MockLeaderboardMetricsMockRecorder) RecordHandlerAttempt(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerAttempt", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordHandlerAttempt), ctx, handlerName)
}

// RecordHandlerDuration mocks base method.
func (m *MockLeaderboardMetrics) RecordHandlerDuration(ctx context.Context, handlerName string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerDuration", ctx, handlerName, duration)
}

// RecordHandlerDuration indicates an expected call of RecordHandlerDuration.
func (mr *MockLeaderboardMetricsMockRecorder) RecordHandlerDuration(ctx, handlerName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerDuration", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordHandlerDuration), ctx, handlerName, duration)
}

// RecordHandlerFailure mocks base method.
func (m *MockLeaderboardMetrics) RecordHandlerFailure(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerFailure", ctx, handlerName)
}

// RecordHandlerFailure indicates an expected call of RecordHandlerFailure.
func (mr *MockLeaderboardMetricsMockRecorder) RecordHandlerFailure(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerFailure", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordHandlerFailure), ctx, handlerName)
}

// RecordHandlerSuccess mocks base method.
func (m *MockLeaderboardMetrics) RecordHandlerSuccess(ctx context.Context, handlerName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordHandlerSuccess", ctx, handlerName)
}

// RecordHandlerSuccess indicates an expected call of RecordHandlerSuccess.
func (mr *MockLeaderboardMetricsMockRecorder) RecordHandlerSuccess(ctx, handlerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordHandlerSuccess", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordHandlerSuccess), ctx, handlerName)
}

// RecordLeaderboardGetAttempt mocks base method.
func (m *MockLeaderboardMetrics) RecordLeaderboardGetAttempt(ctx context.Context, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardGetAttempt", ctx, serviceName)
}

// RecordLeaderboardGetAttempt indicates an expected call of RecordLeaderboardGetAttempt.
func (mr *MockLeaderboardMetricsMockRecorder) RecordLeaderboardGetAttempt(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardGetAttempt", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordLeaderboardGetAttempt), ctx, serviceName)
}

// RecordLeaderboardGetDuration mocks base method.
func (m *MockLeaderboardMetrics) RecordLeaderboardGetDuration(ctx context.Context, serviceName string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardGetDuration", ctx, serviceName, duration)
}

// RecordLeaderboardGetDuration indicates an expected call of RecordLeaderboardGetDuration.
func (mr *MockLeaderboardMetricsMockRecorder) RecordLeaderboardGetDuration(ctx, serviceName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardGetDuration", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordLeaderboardGetDuration), ctx, serviceName, duration)
}

// RecordLeaderboardGetFailure mocks base method.
func (m *MockLeaderboardMetrics) RecordLeaderboardGetFailure(ctx context.Context, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardGetFailure", ctx, serviceName)
}

// RecordLeaderboardGetFailure indicates an expected call of RecordLeaderboardGetFailure.
func (mr *MockLeaderboardMetricsMockRecorder) RecordLeaderboardGetFailure(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardGetFailure", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordLeaderboardGetFailure), ctx, serviceName)
}

// RecordLeaderboardGetSuccess mocks base method.
func (m *MockLeaderboardMetrics) RecordLeaderboardGetSuccess(ctx context.Context, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardGetSuccess", ctx, serviceName)
}

// RecordLeaderboardGetSuccess indicates an expected call of RecordLeaderboardGetSuccess.
func (mr *MockLeaderboardMetricsMockRecorder) RecordLeaderboardGetSuccess(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardGetSuccess", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordLeaderboardGetSuccess), ctx, serviceName)
}

// RecordLeaderboardUpdate mocks base method.
func (m *MockLeaderboardMetrics) RecordLeaderboardUpdate(ctx context.Context, success bool, source string, roundID sharedtypes.RoundID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardUpdate", ctx, success, source, roundID)
}

// RecordLeaderboardUpdate indicates an expected call of RecordLeaderboardUpdate.
func (mr *MockLeaderboardMetricsMockRecorder) RecordLeaderboardUpdate(ctx, success, source, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardUpdate", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordLeaderboardUpdate), ctx, success, source, roundID)
}

// RecordLeaderboardUpdateAttempt mocks base method.
func (m *MockLeaderboardMetrics) RecordLeaderboardUpdateAttempt(ctx context.Context, roundID sharedtypes.RoundID, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardUpdateAttempt", ctx, roundID, serviceName)
}

// RecordLeaderboardUpdateAttempt indicates an expected call of RecordLeaderboardUpdateAttempt.
func (mr *MockLeaderboardMetricsMockRecorder) RecordLeaderboardUpdateAttempt(ctx, roundID, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardUpdateAttempt", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordLeaderboardUpdateAttempt), ctx, roundID, serviceName)
}

// RecordLeaderboardUpdateDuration mocks base method.
func (m *MockLeaderboardMetrics) RecordLeaderboardUpdateDuration(ctx context.Context, serviceName string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardUpdateDuration", ctx, serviceName, duration)
}

// RecordLeaderboardUpdateDuration indicates an expected call of RecordLeaderboardUpdateDuration.
func (mr *MockLeaderboardMetricsMockRecorder) RecordLeaderboardUpdateDuration(ctx, serviceName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardUpdateDuration", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordLeaderboardUpdateDuration), ctx, serviceName, duration)
}

// RecordLeaderboardUpdateFailure mocks base method.
func (m *MockLeaderboardMetrics) RecordLeaderboardUpdateFailure(ctx context.Context, roundID sharedtypes.RoundID, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardUpdateFailure", ctx, roundID, serviceName)
}

// RecordLeaderboardUpdateFailure indicates an expected call of RecordLeaderboardUpdateFailure.
func (mr *MockLeaderboardMetricsMockRecorder) RecordLeaderboardUpdateFailure(ctx, roundID, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardUpdateFailure", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordLeaderboardUpdateFailure), ctx, roundID, serviceName)
}

// RecordLeaderboardUpdateSuccess mocks base method.
func (m *MockLeaderboardMetrics) RecordLeaderboardUpdateSuccess(ctx context.Context, roundID sharedtypes.RoundID, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordLeaderboardUpdateSuccess", ctx, roundID, serviceName)
}

// RecordLeaderboardUpdateSuccess indicates an expected call of RecordLeaderboardUpdateSuccess.
func (mr *MockLeaderboardMetricsMockRecorder) RecordLeaderboardUpdateSuccess(ctx, roundID, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordLeaderboardUpdateSuccess", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordLeaderboardUpdateSuccess), ctx, roundID, serviceName)
}

// RecordNewTagAssignment mocks base method.
func (m *MockLeaderboardMetrics) RecordNewTagAssignment(ctx context.Context, tag sharedtypes.TagNumber, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordNewTagAssignment", ctx, tag, userID)
}

// RecordNewTagAssignment indicates an expected call of RecordNewTagAssignment.
func (mr *MockLeaderboardMetricsMockRecorder) RecordNewTagAssignment(ctx, tag, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordNewTagAssignment", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordNewTagAssignment), ctx, tag, userID)
}

// RecordOperationAttempt mocks base method.
func (m *MockLeaderboardMetrics) RecordOperationAttempt(ctx context.Context, operationName, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationAttempt", ctx, operationName, serviceName)
}

// RecordOperationAttempt indicates an expected call of RecordOperationAttempt.
func (mr *MockLeaderboardMetricsMockRecorder) RecordOperationAttempt(ctx, operationName, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationAttempt", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordOperationAttempt), ctx, operationName, serviceName)
}

// RecordOperationDuration mocks base method.
func (m *MockLeaderboardMetrics) RecordOperationDuration(ctx context.Context, operationName, serviceName string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationDuration", ctx, operationName, serviceName, duration)
}

// RecordOperationDuration indicates an expected call of RecordOperationDuration.
func (mr *MockLeaderboardMetricsMockRecorder) RecordOperationDuration(ctx, operationName, serviceName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationDuration", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordOperationDuration), ctx, operationName, serviceName, duration)
}

// RecordOperationFailure mocks base method.
func (m *MockLeaderboardMetrics) RecordOperationFailure(ctx context.Context, operationName, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationFailure", ctx, operationName, serviceName)
}

// RecordOperationFailure indicates an expected call of RecordOperationFailure.
func (mr *MockLeaderboardMetricsMockRecorder) RecordOperationFailure(ctx, operationName, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationFailure", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordOperationFailure), ctx, operationName, serviceName)
}

// RecordOperationSuccess mocks base method.
func (m *MockLeaderboardMetrics) RecordOperationSuccess(ctx context.Context, operationName, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationSuccess", ctx, operationName, serviceName)
}

// RecordOperationSuccess indicates an expected call of RecordOperationSuccess.
func (mr *MockLeaderboardMetricsMockRecorder) RecordOperationSuccess(ctx, operationName, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationSuccess", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordOperationSuccess), ctx, operationName, serviceName)
}

// RecordServiceAttempt mocks base method.
func (m *MockLeaderboardMetrics) RecordServiceAttempt(ctx context.Context, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordServiceAttempt", ctx, serviceName)
}

// RecordServiceAttempt indicates an expected call of RecordServiceAttempt.
func (mr *MockLeaderboardMetricsMockRecorder) RecordServiceAttempt(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordServiceAttempt", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordServiceAttempt), ctx, serviceName)
}

// RecordServiceDuration mocks base method.
func (m *MockLeaderboardMetrics) RecordServiceDuration(ctx context.Context, serviceName string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordServiceDuration", ctx, serviceName, duration)
}

// RecordServiceDuration indicates an expected call of RecordServiceDuration.
func (mr *MockLeaderboardMetricsMockRecorder) RecordServiceDuration(ctx, serviceName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordServiceDuration", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordServiceDuration), ctx, serviceName, duration)
}

// RecordServiceFailure mocks base method.
func (m *MockLeaderboardMetrics) RecordServiceFailure(ctx context.Context, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordServiceFailure", ctx, serviceName)
}

// RecordServiceFailure indicates an expected call of RecordServiceFailure.
func (mr *MockLeaderboardMetricsMockRecorder) RecordServiceFailure(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordServiceFailure", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordServiceFailure), ctx, serviceName)
}

// RecordServiceSuccess mocks base method.
func (m *MockLeaderboardMetrics) RecordServiceSuccess(ctx context.Context, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordServiceSuccess", ctx, serviceName)
}

// RecordServiceSuccess indicates an expected call of RecordServiceSuccess.
func (mr *MockLeaderboardMetricsMockRecorder) RecordServiceSuccess(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordServiceSuccess", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordServiceSuccess), ctx, serviceName)
}

// RecordTagAssignment mocks base method.
func (m *MockLeaderboardMetrics) RecordTagAssignment(ctx context.Context, success bool, tagNumber sharedtypes.TagNumber, operationName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagAssignment", ctx, success, tagNumber, operationName)
}

// RecordTagAssignment indicates an expected call of RecordTagAssignment.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagAssignment(ctx, success, tagNumber, operationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagAssignment", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagAssignment), ctx, success, tagNumber, operationName)
}

// RecordTagAssignmentAttempt mocks base method.
func (m *MockLeaderboardMetrics) RecordTagAssignmentAttempt(ctx context.Context, operationName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagAssignmentAttempt", ctx, operationName)
}

// RecordTagAssignmentAttempt indicates an expected call of RecordTagAssignmentAttempt.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagAssignmentAttempt(ctx, operationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagAssignmentAttempt", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagAssignmentAttempt), ctx, operationName)
}

// RecordTagAssignmentDuration mocks base method.
func (m *MockLeaderboardMetrics) RecordTagAssignmentDuration(ctx context.Context, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagAssignmentDuration", ctx, duration)
}

// RecordTagAssignmentDuration indicates an expected call of RecordTagAssignmentDuration.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagAssignmentDuration(ctx, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagAssignmentDuration", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagAssignmentDuration), ctx, duration)
}

// RecordTagAssignmentFailure mocks base method.
func (m *MockLeaderboardMetrics) RecordTagAssignmentFailure(ctx context.Context, operationName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagAssignmentFailure", ctx, operationName)
}

// RecordTagAssignmentFailure indicates an expected call of RecordTagAssignmentFailure.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagAssignmentFailure(ctx, operationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagAssignmentFailure", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagAssignmentFailure), ctx, operationName)
}

// RecordTagAssignmentSuccess mocks base method.
func (m *MockLeaderboardMetrics) RecordTagAssignmentSuccess(ctx context.Context, operationName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagAssignmentSuccess", ctx, operationName)
}

// RecordTagAssignmentSuccess indicates an expected call of RecordTagAssignmentSuccess.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagAssignmentSuccess(ctx, operationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagAssignmentSuccess", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagAssignmentSuccess), ctx, operationName)
}

// RecordTagAssignmentUpdate mocks base method.
func (m *MockLeaderboardMetrics) RecordTagAssignmentUpdate(ctx context.Context, oldTag, newTag sharedtypes.TagNumber, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagAssignmentUpdate", ctx, oldTag, newTag, userID)
}

// RecordTagAssignmentUpdate indicates an expected call of RecordTagAssignmentUpdate.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagAssignmentUpdate(ctx, oldTag, newTag, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagAssignmentUpdate", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagAssignmentUpdate), ctx, oldTag, newTag, userID)
}

// RecordTagAvailabilityCheck mocks base method.
func (m *MockLeaderboardMetrics) RecordTagAvailabilityCheck(ctx context.Context, available bool, tagNumber sharedtypes.TagNumber, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagAvailabilityCheck", ctx, available, tagNumber, serviceName)
}

// RecordTagAvailabilityCheck indicates an expected call of RecordTagAvailabilityCheck.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagAvailabilityCheck(ctx, available, tagNumber, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagAvailabilityCheck", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagAvailabilityCheck), ctx, available, tagNumber, serviceName)
}

// RecordTagGetAttempt mocks base method.
func (m *MockLeaderboardMetrics) RecordTagGetAttempt(ctx context.Context, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagGetAttempt", ctx, serviceName)
}

// RecordTagGetAttempt indicates an expected call of RecordTagGetAttempt.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagGetAttempt(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagGetAttempt", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagGetAttempt), ctx, serviceName)
}

// RecordTagGetDuration mocks base method.
func (m *MockLeaderboardMetrics) RecordTagGetDuration(ctx context.Context, serviceName string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagGetDuration", ctx, serviceName, duration)
}

// RecordTagGetDuration indicates an expected call of RecordTagGetDuration.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagGetDuration(ctx, serviceName, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagGetDuration", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagGetDuration), ctx, serviceName, duration)
}

// RecordTagGetFailure mocks base method.
func (m *MockLeaderboardMetrics) RecordTagGetFailure(ctx context.Context, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagGetFailure", ctx, serviceName)
}

// RecordTagGetFailure indicates an expected call of RecordTagGetFailure.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagGetFailure(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagGetFailure", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagGetFailure), ctx, serviceName)
}

// RecordTagGetSuccess mocks base method.
func (m *MockLeaderboardMetrics) RecordTagGetSuccess(ctx context.Context, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagGetSuccess", ctx, serviceName)
}

// RecordTagGetSuccess indicates an expected call of RecordTagGetSuccess.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagGetSuccess(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagGetSuccess", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagGetSuccess), ctx, serviceName)
}

// RecordTagRemoval mocks base method.
func (m *MockLeaderboardMetrics) RecordTagRemoval(ctx context.Context, tag sharedtypes.TagNumber, userID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagRemoval", ctx, tag, userID)
}

// RecordTagRemoval indicates an expected call of RecordTagRemoval.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagRemoval(ctx, tag, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagRemoval", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagRemoval), ctx, tag, userID)
}

// RecordTagSwapAttempt mocks base method.
func (m *MockLeaderboardMetrics) RecordTagSwapAttempt(ctx context.Context, requestorID, targetID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagSwapAttempt", ctx, requestorID, targetID)
}

// RecordTagSwapAttempt indicates an expected call of RecordTagSwapAttempt.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagSwapAttempt(ctx, requestorID, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagSwapAttempt", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagSwapAttempt), ctx, requestorID, targetID)
}

// RecordTagSwapFailure mocks base method.
func (m *MockLeaderboardMetrics) RecordTagSwapFailure(ctx context.Context, requestorID, targetID sharedtypes.DiscordID, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagSwapFailure", ctx, requestorID, targetID, reason)
}

// RecordTagSwapFailure indicates an expected call of RecordTagSwapFailure.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagSwapFailure(ctx, requestorID, targetID, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagSwapFailure", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagSwapFailure), ctx, requestorID, targetID, reason)
}

// RecordTagSwapSuccess mocks base method.
func (m *MockLeaderboardMetrics) RecordTagSwapSuccess(ctx context.Context, requestorID, targetID sharedtypes.DiscordID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordTagSwapSuccess", ctx, requestorID, targetID)
}

// RecordTagSwapSuccess indicates an expected call of RecordTagSwapSuccess.
func (mr *MockLeaderboardMetricsMockRecorder) RecordTagSwapSuccess(ctx, requestorID, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTagSwapSuccess", reflect.TypeOf((*MockLeaderboardMetrics)(nil).RecordTagSwapSuccess), ctx, requestorID, targetID)
}
