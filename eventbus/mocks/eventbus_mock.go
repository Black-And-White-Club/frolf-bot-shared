// Code generated by MockGen. DO NOT EDIT.
// Source: eventbus/eventbus.go
//
// Generated by this command:
//
//	mockgen -source=eventbus/eventbus.go -destination=eventbus/mocks/eventbus_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	eventbus "github.com/Black-And-White-Club/frolf-bot-shared/eventbus"
	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	message "github.com/ThreeDotsLabs/watermill/message"
	nats "github.com/nats-io/nats.go"
	jetstream "github.com/nats-io/nats.go/jetstream"
	gomock "go.uber.org/mock/gomock"
)

// MockEventBus is a mock of EventBus interface.
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
	isgomock struct{}
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus.
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance.
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// CancelScheduledMessage mocks base method.
func (m *MockEventBus) CancelScheduledMessage(ctx context.Context, roundID sharedtypes.RoundID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelScheduledMessage", ctx, roundID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelScheduledMessage indicates an expected call of CancelScheduledMessage.
func (mr *MockEventBusMockRecorder) CancelScheduledMessage(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelScheduledMessage", reflect.TypeOf((*MockEventBus)(nil).CancelScheduledMessage), ctx, roundID)
}

// Close mocks base method.
func (m *MockEventBus) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEventBusMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventBus)(nil).Close))
}

// CreateStream mocks base method.
func (m *MockEventBus) CreateStream(ctx context.Context, streamName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, streamName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockEventBusMockRecorder) CreateStream(ctx, streamName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockEventBus)(nil).CreateStream), ctx, streamName)
}

// GetHealthCheckers mocks base method.
func (m *MockEventBus) GetHealthCheckers() []eventbus.HealthChecker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthCheckers")
	ret0, _ := ret[0].([]eventbus.HealthChecker)
	return ret0
}

// GetHealthCheckers indicates an expected call of GetHealthCheckers.
func (mr *MockEventBusMockRecorder) GetHealthCheckers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheckers", reflect.TypeOf((*MockEventBus)(nil).GetHealthCheckers))
}

// GetJetStream mocks base method.
func (m *MockEventBus) GetJetStream() jetstream.JetStream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJetStream")
	ret0, _ := ret[0].(jetstream.JetStream)
	return ret0
}

// GetJetStream indicates an expected call of GetJetStream.
func (mr *MockEventBusMockRecorder) GetJetStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJetStream", reflect.TypeOf((*MockEventBus)(nil).GetJetStream))
}

// GetNATSConnection mocks base method.
func (m *MockEventBus) GetNATSConnection() *nats.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNATSConnection")
	ret0, _ := ret[0].(*nats.Conn)
	return ret0
}

// GetNATSConnection indicates an expected call of GetNATSConnection.
func (mr *MockEventBusMockRecorder) GetNATSConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNATSConnection", reflect.TypeOf((*MockEventBus)(nil).GetNATSConnection))
}

// ProcessDelayedMessages mocks base method.
func (m *MockEventBus) ProcessDelayedMessages(ctx context.Context, roundID sharedtypes.RoundID, scheduledTime sharedtypes.StartTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDelayedMessages", ctx, roundID, scheduledTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessDelayedMessages indicates an expected call of ProcessDelayedMessages.
func (mr *MockEventBusMockRecorder) ProcessDelayedMessages(ctx, roundID, scheduledTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDelayedMessages", reflect.TypeOf((*MockEventBus)(nil).ProcessDelayedMessages), ctx, roundID, scheduledTime)
}

// Publish mocks base method.
func (m *MockEventBus) Publish(topic string, messages ...*message.Message) error {
	m.ctrl.T.Helper()
	varargs := []any{topic}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockEventBusMockRecorder) Publish(topic any, messages ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{topic}, messages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBus)(nil).Publish), varargs...)
}

// RecoverScheduledRounds mocks base method.
func (m *MockEventBus) RecoverScheduledRounds(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecoverScheduledRounds", ctx)
}

// RecoverScheduledRounds indicates an expected call of RecoverScheduledRounds.
func (mr *MockEventBusMockRecorder) RecoverScheduledRounds(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverScheduledRounds", reflect.TypeOf((*MockEventBus)(nil).RecoverScheduledRounds), ctx)
}

// ScheduleDelayedMessage mocks base method.
func (m *MockEventBus) ScheduleDelayedMessage(ctx context.Context, originalSubject string, roundID sharedtypes.RoundID, scheduledTime sharedtypes.StartTime, payload []byte, additionalMetadata map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleDelayedMessage", ctx, originalSubject, roundID, scheduledTime, payload, additionalMetadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleDelayedMessage indicates an expected call of ScheduleDelayedMessage.
func (mr *MockEventBusMockRecorder) ScheduleDelayedMessage(ctx, originalSubject, roundID, scheduledTime, payload, additionalMetadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleDelayedMessage", reflect.TypeOf((*MockEventBus)(nil).ScheduleDelayedMessage), ctx, originalSubject, roundID, scheduledTime, payload, additionalMetadata)
}

// Subscribe mocks base method.
func (m *MockEventBus) Subscribe(ctx context.Context, topic string) (<-chan *message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, topic)
	ret0, _ := ret[0].(<-chan *message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEventBusMockRecorder) Subscribe(ctx, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventBus)(nil).Subscribe), ctx, topic)
}

// MockHealthChecker is a mock of HealthChecker interface.
type MockHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerMockRecorder
	isgomock struct{}
}

// MockHealthCheckerMockRecorder is the mock recorder for MockHealthChecker.
type MockHealthCheckerMockRecorder struct {
	mock *MockHealthChecker
}

// NewMockHealthChecker creates a new mock instance.
func NewMockHealthChecker(ctrl *gomock.Controller) *MockHealthChecker {
	mock := &MockHealthChecker{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthChecker) EXPECT() *MockHealthCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockHealthChecker) Check(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockHealthCheckerMockRecorder) Check(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockHealthChecker)(nil).Check), ctx)
}

// Name mocks base method.
func (m *MockHealthChecker) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockHealthCheckerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockHealthChecker)(nil).Name))
}
