// Code generated by MockGen. DO NOT EDIT.
// Source: utils/metadata.go
//
// Generated by this command:
//
//	mockgen -source=utils/metadata.go -destination=./mocks/metadata_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	lokifrolfbot "github.com/Black-And-White-Club/frolf-bot-shared/observability/loki"
	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockEventUtil is a mock of EventUtil interface.
type MockEventUtil struct {
	ctrl     *gomock.Controller
	recorder *MockEventUtilMockRecorder
	isgomock struct{}
}

// MockEventUtilMockRecorder is the mock recorder for MockEventUtil.
type MockEventUtilMockRecorder struct {
	mock *MockEventUtil
}

// NewMockEventUtil creates a new mock instance.
func NewMockEventUtil(ctrl *gomock.Controller) *MockEventUtil {
	mock := &MockEventUtil{ctrl: ctrl}
	mock.recorder = &MockEventUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventUtil) EXPECT() *MockEventUtilMockRecorder {
	return m.recorder
}

// PropagateMetadata mocks base method.
func (m *MockEventUtil) PropagateMetadata(srcMsg, dstMsg *message.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PropagateMetadata", srcMsg, dstMsg)
}

// PropagateMetadata indicates an expected call of PropagateMetadata.
func (mr *MockEventUtilMockRecorder) PropagateMetadata(srcMsg, dstMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropagateMetadata", reflect.TypeOf((*MockEventUtil)(nil).PropagateMetadata), srcMsg, dstMsg)
}

// WithMetadata mocks base method.
func (m *MockEventUtil) WithMetadata(msg *message.Message, payload any, logger lokifrolfbot.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", msg, payload, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata.
func (mr *MockEventUtilMockRecorder) WithMetadata(msg, payload, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*MockEventUtil)(nil).WithMetadata), msg, payload, logger)
}
