// Code generated by MockGen. DO NOT EDIT.
// Source: utils/messages.go
//
// Generated by this command:
//
//	mockgen -source=utils/messages.go -destination=./mocks/messages_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockHelpers is a mock of Helpers interface.
type MockHelpers struct {
	ctrl     *gomock.Controller
	recorder *MockHelpersMockRecorder
	isgomock struct{}
}

// MockHelpersMockRecorder is the mock recorder for MockHelpers.
type MockHelpersMockRecorder struct {
	mock *MockHelpers
}

// NewMockHelpers creates a new mock instance.
func NewMockHelpers(ctrl *gomock.Controller) *MockHelpers {
	mock := &MockHelpers{ctrl: ctrl}
	mock.recorder = &MockHelpersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelpers) EXPECT() *MockHelpersMockRecorder {
	return m.recorder
}

// CreateNewMessage mocks base method.
func (m *MockHelpers) CreateNewMessage(payload any, topic string) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewMessage", payload, topic)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewMessage indicates an expected call of CreateNewMessage.
func (mr *MockHelpersMockRecorder) CreateNewMessage(payload, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewMessage", reflect.TypeOf((*MockHelpers)(nil).CreateNewMessage), payload, topic)
}

// CreateResultMessage mocks base method.
func (m *MockHelpers) CreateResultMessage(originalMsg *message.Message, payload any, topic string) (*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResultMessage", originalMsg, payload, topic)
	ret0, _ := ret[0].(*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResultMessage indicates an expected call of CreateResultMessage.
func (mr *MockHelpersMockRecorder) CreateResultMessage(originalMsg, payload, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResultMessage", reflect.TypeOf((*MockHelpers)(nil).CreateResultMessage), originalMsg, payload, topic)
}

// UnmarshalPayload mocks base method.
func (m *MockHelpers) UnmarshalPayload(msg *message.Message, payload any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalPayload", msg, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalPayload indicates an expected call of UnmarshalPayload.
func (mr *MockHelpersMockRecorder) UnmarshalPayload(msg, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalPayload", reflect.TypeOf((*MockHelpers)(nil).UnmarshalPayload), msg, payload)
}
