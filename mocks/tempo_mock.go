// Code generated by MockGen. DO NOT EDIT.
// Source: observability/tempo.go
//
// Generated by this command:
//
//	mockgen -source=observability/tempo.go -destination=./mocks/tempo_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	observability "github.com/Black-And-White-Club/frolf-bot-shared/observability"
	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
	isgomock struct{}
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// InitTracing mocks base method.
func (m *MockTracer) InitTracing(ctx context.Context, opts observability.TracingOptions) (func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitTracing", ctx, opts)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitTracing indicates an expected call of InitTracing.
func (mr *MockTracerMockRecorder) InitTracing(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitTracing", reflect.TypeOf((*MockTracer)(nil).InitTracing), ctx, opts)
}

// InjectTraceContext mocks base method.
func (m *MockTracer) InjectTraceContext(ctx context.Context, msg *message.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InjectTraceContext", ctx, msg)
}

// InjectTraceContext indicates an expected call of InjectTraceContext.
func (mr *MockTracerMockRecorder) InjectTraceContext(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectTraceContext", reflect.TypeOf((*MockTracer)(nil).InjectTraceContext), ctx, msg)
}

// TraceHandler mocks base method.
func (m *MockTracer) TraceHandler(h message.HandlerFunc) message.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TraceHandler", h)
	ret0, _ := ret[0].(message.HandlerFunc)
	return ret0
}

// TraceHandler indicates an expected call of TraceHandler.
func (mr *MockTracerMockRecorder) TraceHandler(h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceHandler", reflect.TypeOf((*MockTracer)(nil).TraceHandler), h)
}
